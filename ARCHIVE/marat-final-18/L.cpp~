#include "bits/stdc++.h"
using namespace std;

////////////// Prewritten code follows. Look down for solution. ////////////////
#define x first
#define y second
#define len(x) ((int)(x).size())
using pii = pair<int, int>;
using ll = long long;
using llu = long long unsigned;
using ld = long double;

const ld EPS = 1e-9;
inline int cmp(ld x, ld y = 0, ld tol = EPS) {
  return (x <= y + tol) ? (x + tol < y) ? -1 : 0 : 1;
}

const int MOD = 1;
inline int mod (ll x, int m = MOD) {
  return (int)(((x%m) + m)%m);
}

////////////////////////// Solution starts below. //////////////////////////////

const int MAXN = 1e5+100;

int q;
bool not_prime[MAXN];
int bit[MAXN];
vector<int> primes;
vector<int> queries[MAXN];
vector<pii> inp;
map<pii, int> mp;

void add (int p, int v) {
  for (int i = p; i < MAXN; i+=i&-i)
    bit[i] += v;
}

int sum (int p) {
  int r = 0;
  for (int i = p; i > 0; i-=i&-i)
    r += bit[i];

  return r;
}

void sieve () {
  int i;
  for (i = 2; i*i < MAXN; i++)
    if (!not_prime[i]) {
      primes.push_back (i);
      for (int j = i*i; j < MAXN; j+=i)
	not_prime[j] = true;
    }
  for (; i < MAXN; i++)
    if (!not_prime[i])
      primes.push_back (i);
}

void ger (int v, int p, int acu) {
  //printf ("%d %d\n", p, acu);
  int val;
  val = (primes[p] == v ? primes[p] : 1);
  while (acu * val < MAXN) {
    if (primes[p] == v)
      add (acu * val, 1);
    else
      ger (v, p+1, acu * val);
   val *= primes[p];
  }
}

int main () {
  sieve();
  scanf ("%d", &q);
  while (q--) {
    int n, k;
    scanf ("%d %d", &n, &k);
    queries[k].push_back (n);
    inp.push_back ({n, k});
  }

  for (int k = 2; k <= 41; k++)
  for (int i = 2; i < 21; i++) {
    //printf ("|%d\n", i);
    if (!not_prime[i]) {
      //printf ("> %d\n", i);
      ger (i, 0, 1);
     
      for (int k = 2; k <= 41;k++)
	printf ("%2d ", sum(k));
      putchar ('\n');

      
    }
    for (int n : queries[i])
      mp[make_pair(n, i)] = sum (n);
  }

  /*
  for (int i = 2; i < 20;i++)
    printf ("%d ", bit[i]);
  for (int i = 2; i < 20;i++)
    printf ("%d ", sum(i));
  putchar ('\n');
  */
  
  for (auto p : inp)
    printf ("%d\n", mp[p]);
  

  return 0;
}
