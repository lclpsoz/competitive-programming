#include <bits/stdc++.h>
using namespace std;

////////////// Prewritten code follows. Look down for solution. ////////////////
#define x first
#define y second
#define len(x) ((int)(x).size())
using pii = pair<int, int>;
using ll = long long;
using llu = long long unsigned;
using ld = long double;

const ld EPS = 1e-9;
inline int cmp(ld x, ld y = 0, ld tol = EPS) {
  return (x <= y + tol) ? (x + tol < y) ? -1 : 0 : 1;
}

const int MOD = 1;
inline int mod (ll x, int m = MOD) {
  return (int)(((x%m) + m)%m);
}

////////////////////////// Solution starts below. //////////////////////////////

const int N = 1e5+10;

int n;
vector<int> vec, compress;
vector<int> tree[4*N], mapLeft[4*N], mapRight[4*N];

int getComp (int v) {
  return (int)(lower_bound (compress.begin(), compress.end())-compress.begin());
}

int getVal (int p) {
  return compress[p];
}

void init (int p, int mini, int maxi) {
  if (mini > maxi) return;
  
  int l = 2*p + 1;
  int r = 2*p + 2;
  int mt = (mini+maxi)/2;
  for (int i = 0; i < 
  init (l, mini, mt);
  init (r, mt+1, maxi);
}

int main () {
  scanf ("%d", &n);
  int x;
  for (int i = 0; i < n; i++) {
    scanf ("%d", &x);
    vec.push_back (x);
    compress.push_back (x);
  }
  
  unique (sort (compress.begin(), compress.end()));

  for (int v : vec)
    tree[0].push_back (getComp (vec[i]

  init (0, 0, n);
  
  return 0;
}
